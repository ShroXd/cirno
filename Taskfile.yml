version: "3"
silent: true

tasks:
  # ---------------------------- 📦 Dependency Management 📦 ----------------------------

  install:
    desc: "📦 Install dependencies for both front-end and back-end"
    deps:
      - install:frontend
      - install:backend

  install:frontend:
    desc: "📦 Install front-end dependencies"
    dir: web
    cmds:
      - pnpm install

  install:backend:
    desc: "📦 Install back-end dependencies"
    dir: backend
    cmds:
      - cargo fetch

  # ---------------------------- 🧪 Testing Tasks 🧪 ----------------------------

  test:
    desc: "🧪 Run tests for both front-end and back-end"
    deps:
      - test:frontend
      - test:backend

  test:frontend:
    desc: "🧪 Run front-end tests"
    dir: web
    cmds:
      - pnpm test

  test:backend:
    desc: "🧪 Run back-end tests"
    dir: backend
    cmds:
      - cargo test

  # ---------------------------- 🛠️ Development Mode 🛠️ ----------------------------

  dev:
    desc: "🚀 Start development servers for both front-end and back-end"
    deps:
      - dev:frontend
      - dev:backend

  dev:frontend:
    desc: "🚀 Start front-end development server"
    dir: web
    cmds:
      - pnpm run dev

  dev:backend:
    desc: "🚀 Start back-end development server"
    dir: backend
    cmds:
      - cargo run

  # ---------------------------- 🏗️ Build for Production 🏗️ ----------------------------

  build:
    desc: "🏗️ Build both front-end and back-end for production"
    deps:
      - build:frontend
      - build:backend

  build:frontend:
    desc: "🏗️ Build front-end for production"
    dir: web
    cmds:
      - pnpm run build

  build:backend:
    desc: "🏗️ Build back-end for production"
    dir: backend
    cmds:
      - cargo build --release

  # ---------------------------- 🐳 Docker Management 🐳 ----------------------------

  docker:build:
    desc: "🐳 Build Docker image 'cirno'"
    cmds:
      - echo "🚧 Building Docker image 'cirno'..."
      - docker build -t cirno .

  docker:run:
    desc: "🚀 Run Docker container 'cirno' in detached mode"
    cmds:
      - echo "🚀 Starting Docker container 'cirno' on port 8000..."
      - docker run -d --network bridge -p 8000:8000 --name cirno_container cirno

  docker:stop:
    desc: "🛑 Stop and remove Docker container 'cirno_container'"
    cmds:
      - echo "🛑 Stopping Docker container 'cirno'..."
      - docker stop cirno_container
      - docker rm cirno_container

  docker:clean:
    desc: "🧹 Remove Docker image 'cirno'"
    cmds:
      - echo "🧹 Removing Docker image 'cirno'..."
      - docker rmi cirno

  # ---------------------------- 🧹 Clean Build Artifacts 🧹 ----------------------------

  clean:
    desc: "🧹 Clean all build artifacts for front-end, back-end, and Docker"
    deps:
      - clean:frontend
      - clean:backend
      - clean:docker

  clean:frontend:
    desc: "🧹 Clean front-end build artifacts"
    dir: web
    cmds:
      - rm -rf dist
      - rm -f tsconfig.app.tsbuildinfo
      - rm -f tsconfig.node.tsbuildinfo

  clean:backend:
    desc: "🧹 Clean back-end build artifacts"
    dir: backend
    cmds:
      - rm -rf target

  clean:docker:
    desc: "🧹 Remove Docker image 'cirno'"
    cmds:
      - docker rmi cirno

  # ---------------------------- 🔧 Tooling Tasks 🔧 ----------------------------

  regenerate-bindings:
    desc: "🔄 Regenerate bindings type files by cleaning and running backend tests"
    dir: web
    cmds:
      - echo "🧹 Cleaning web/src/bindings..."
      - rm -rf src/bindings/*
      - echo "🧪 Running backend tests to regenerate bindings..."
      - cd ../backend && cargo test

  create-database:
    desc: "🗂️ Create the SQLite database file by running the setup script"
    dir: scripts
    cmds:
      - echo "📂 Running database setup script..."
      - ./database.sh
