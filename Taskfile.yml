version: "3"
silent: true

dotenv: [".env.development"]

env:
  DATABASE_URL: database.db
  VITE_API_URL: http://localhost:8000
  GST_DEBUG_DUMP_DOT_DIR: "{{.ROOT_DIR}}/backend/gst_debug_dot_dir"
  GST_DEBUG: "3"

tasks:
  # TODO: add command to setup the project.
  # 1. install taskfile runtime
  # 2. install rust
  # 3. install gstreamer and related plugins
  # 4. create tmp folder
  # 5. cargo install cargo-tarpaulin

  # ---------------------------- üì¶ Dependency Management üì¶ ----------------------------

  install:
    desc: "üì¶ Install dependencies for both front-end and back-end"
    deps:
      - install:frontend
      - install:backend

  install:frontend:
    desc: "üì¶ Install front-end dependencies"
    dir: web
    cmds:
      - pnpm install

  install:backend:
    desc: "üì¶ Install back-end dependencies"
    dir: backend
    cmds:
      - cargo fetch
      # - cargo install cargo-tarpaulin

  # ---------------------------- üß™ Testing Tasks üß™ ----------------------------

  test:
    desc: "üß™ Run tests for both front-end and back-end"
    deps:
      - test:frontend
      - test:backend

  test:frontend:
    desc: "üß™ Run front-end tests"
    dir: web
    cmds:
      - pnpm test

  test:backend:
    desc: "üß™ Run back-end tests"
    dir: backend
    cmds:
      - cargo test

  # ---------------------------- üìä Coverage Tasks üìä ----------------------------

  coverage:frontend:
    desc: "üìä Generate coverage report for front-end tests"
    dir: web
    cmds:
      - pnpm run test:coverage
      - open coverage/index.html

  coverage:backend:
    desc: "üìä Generate coverage report for back-end tests"
    dir: backend
    cmds:
      - TS_RS_EXPORT_DIR="../web/src/bindings" cargo tarpaulin --out Html --output-dir coverage
      - open coverage/tarpaulin-report.html

  # ---------------------------- üõ†Ô∏è Development Mode üõ†Ô∏è ----------------------------

  dev:
    desc: "üöÄ Start development servers for both front-end and back-end"
    deps:
      - dev:frontend
      - dev:backend

  dev:frontend:
    desc: "üöÄ Start front-end development server"
    dir: web
    cmds:
      - pnpm run dev

  dev:backend:
    desc: "üöÄ Start back-end development server"
    dir: backend
    cmds:
      - cargo run

  # ---------------------------- üé® Format Code üé® ----------------------------

  format:
    desc: "üé® Format both front-end and back-end code"
    deps:
      - format:frontend
      - format:backend

  format:frontend:
    desc: "üé® Format front-end code"
    dir: web
    cmds:
      - pnpm run format

  format:backend:
    desc: "üé® Format back-end Rust code"
    dir: backend
    cmds:
      - cargo fmt -- --check --verbose

  # ---------------------------- üåÆ Check Code üåÆ ----------------------------

  check:
    desc: "üåÆ Check front-end and back-end code"
    deps:
      - check:frontend
      - check:backend

  check:frontend:
    desc: "üåÆ Check front-end code"
    dir: web
    cmds:
      - pnpm run lint

  check:backend:
    desc: "üåÆ Check back-end code"
    dir: backend
    cmds:
      - cargo check
      - cargo clippy -- -D warnings

  # ---------------------------- üèóÔ∏è Build for Production üèóÔ∏è ----------------------------

  build:
    desc: "üèóÔ∏è Build both front-end and back-end for production"
    deps:
      - build:frontend
      - build:backend

  build:frontend:
    desc: "üèóÔ∏è Build front-end for production"
    dir: web
    cmds:
      - pnpm run build

  build:backend:
    desc: "üèóÔ∏è Build back-end for production"
    dir: backend
    cmds:
      - cargo build --release

  # ---------------------------- üê≥ Docker Management üê≥ ----------------------------

  docker:build:
    desc: "üê≥ Build Docker image 'cirno'"
    cmds:
      - echo "üöß Building Docker image 'cirno'..."
      - docker build -t cirno .

  docker:run:
    desc: "üöÄ Run Docker container 'cirno' in detached mode"
    cmds:
      - echo "üöÄ Starting Docker container 'cirno' on port 8000..."
      - |
        docker run -d \
          --network bridge \
          -p 8000:8000 \
          --name cirno_container \
          --env-file .env.production \
          cirno

  docker:stop:
    desc: "üõë Stop and remove Docker container 'cirno_container'"
    cmds:
      - echo "üõë Stopping Docker container 'cirno'..."
      - docker stop cirno_container
      - docker rm cirno_container

  docker:clean:
    desc: "üßπ Remove Docker image 'cirno'"
    cmds:
      - echo "üßπ Removing Docker image 'cirno'..."
      - docker rmi cirno

  # ---------------------------- üßπ Clean Build Artifacts üßπ ----------------------------

  clean:
    desc: "üßπ Clean all build artifacts for front-end, back-end, and Docker"
    deps:
      - clean:frontend
      - clean:backend
      - clean:docker

  clean:frontend:
    desc: "üßπ Clean front-end build artifacts"
    dir: web
    cmds:
      - rm -rf dist
      - rm -f tsconfig.app.tsbuildinfo
      - rm -f tsconfig.node.tsbuildinfo

  clean:backend:
    desc: "üßπ Clean back-end build artifacts"
    dir: backend
    cmds:
      - rm -rf target

  clean:docker:
    desc: "üßπ Remove Docker image 'cirno'"
    cmds:
      - docker rmi cirno

  clean:media-files:
    desc: "üßπ Remove all media files under /backend/tmp folder"
    dir: backend
    cmds:
      - rm -rf tmp/*

  # ---------------------------- üîß Tooling Tasks üîß ----------------------------

  generate-bindings:
    desc: "üîÑ Generate bindings type files by cleaning and running backend tests"
    dir: web
    cmds:
      - echo "üßπ Cleaning web/src/bindings..."
      - rm -rf src/bindings/*
      - echo "üß™ Running backend tests to generate bindings..."
      - cd ../backend && cargo test

  create-database:
    desc: "üóÇÔ∏è Create the SQLite database file by running the setup script"
    dir: backend/scripts
    cmds:
      - echo "üìÇ Running database setup script..."
      - ./create_db.sh

  check-database:
    desc: "üîç Check and prepare database schema with sqlx"
    cmds:
      - |
        echo "üìÇ Setting DATABASE_URL for the database..."
        export DATABASE_URL="sqlite://$(pwd)/backend/database.db"
        echo "DATABASE_URL is set to: $DATABASE_URL"
        cd backend
        echo "üèóÔ∏è Running cargo sqlx prepare..."
        cargo sqlx prepare

  kill-backend:
    desc: "üî™ Kill any process running on port 8000"
    cmds:
      - |
        echo "üîç Searching for process on port 8000..."
        pid=$(lsof -t -i :8000 || true)
        if [ -n "$pid" ]; then
          echo "üíÄ Killing process $pid on port 8000..."
          kill -9 $pid
          echo "‚úÖ Process $pid killed successfully."
        else
          echo "üö´ No process found on port 8000."
        fi

  kill-frontend:
    desc: "üî™ Kill any process running on port 5173"
    cmds:
      - |
        echo "üîç Searching for process on port 5173..."
        pid=$(lsof -t -i :5173 || true)
        if [ -n "$pid" ]; then
          echo "üíÄ Killing process $pid on port 5173..."
          kill -9 $pid
          echo "‚úÖ Process $pid killed successfully."
        else
          echo "üö´ No process found on port 5173."
        fi

  count-lines:
    desc: "üìä Count lines of code excluding unnecessary files and directories"
    cmds:
      - |
        echo "üìä Counting lines of code..."
        cloc . \
        --exclude-dir=node_modules,target,dist,build,.git,vendor,logs,tmp,coverage \
        --exclude-ext=lock,tsbuildinfo \
        --not-match-f="(package-lock\.json|pnpm-lock\.yaml|Cargo\.lock)"
        echo "‚úÖ Code line count completed."

  test-env:
    desc: "üß™ Test environment variables"
    cmds:
      - echo "GST_DEBUG_DUMP_DOT_DIR = $GST_DEBUG_DUMP_DOT_DIR"
      - echo "DATABASE_URL = $DATABASE_URL"
      - echo "VITE_API_URL = $VITE_API_URL"
  
  convert-dot:
    desc: "üíª Convert GST_DEBUG_DOT_DIR files to SVG"
    cmds:
      - echo "üíª Converting GST_DEBUG_DOT_DIR files to SVG..."
      - dot -Tsvg $GST_DEBUG_DUMP_DOT_DIR/pipeline.dot > $GST_DEBUG_DUMP_DOT_DIR/pipeline.svg
      - echo "‚úîÔ∏è GST_DEBUG_DOT_DIR files converted to SVG."
